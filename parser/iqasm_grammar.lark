start: header_statements body_statements

// Header Rules
header_statements: [_seq_sep? header_statement (_seq_sep header_statement)* _seq_sep?]
?header_statement: register_statement | map_statement | let_statement
register_statement: "reg" array_declaration
map_statement: "map" map_target map_source
?map_target: IDENTIFIER | array_declaration
?map_source: IDENTIFIER | array_slice
let_statement: "let" IDENTIFIER SIGNED_NUMBER

// Body rules
body_statements: [body_statement (_seq_sep body_statement)* _seq_sep?]
?body_statement: gate_statement | macro_definition | loop_statement | gate_block
gate_statement: _gate_name _gate_arg_list
_gate_name: IDENTIFIER
_gate_arg_list: _gate_arg*
_gate_arg: array_element | IDENTIFIER | SIGNED_NUMBER
macro_definition: "macro" _gate_def_list gate_block
_gate_def_list: IDENTIFIER*
loop_statement: "loop" let_or_integer gate_block

// Gate blocks
?gate_block: sequential_gate_block | parallel_gate_block
sequential_gate_block: "{" _sequential_statements "}"
_sequential_statements: [_seq_sep* _sequential_statement (_seq_sep _sequential_statement)* _seq_sep*]
_sequential_statement: gate_statement | loop_statement | parallel_gate_block
parallel_gate_block: "<" _parallel_statements ">"
_parallel_statements: [_par_sep* _parallel_statement (_par_sep _parallel_statement)* _par_sep*]
_parallel_statement: gate_statement | sequential_gate_block

// Common rules
array_declaration: IDENTIFIER "[" let_or_integer "]"
array_element: IDENTIFIER "[" let_or_integer "]"
array_slice: IDENTIFIER "[" _slice_indexing "]"
_slice_indexing: _slice_single | _slice_begin_end | _slice_full
_slice_single: let_or_integer
_slice_begin_end: let_or_integer ":" let_or_signed_integer
_slice_full: let_or_integer ":" let_or_signed_integer ":" let_or_signed_integer
?let_or_integer: IDENTIFIER | INTEGER
?let_or_signed_integer: IDENTIFIER | SIGNED_INTEGER
_seq_sep: ";" | _NEWLINE+
_par_sep: "|" | _NEWLINE+
_NEWLINE: NEWLINE

// Comment rules
LINE_COMMENT: "//" /[^\n]*/
BLOCK_COMMENT: "/*" /.*/ "*/"
%ignore LINE_COMMENT
%ignore BLOCK_COMMENT

// Identifier rules
IDENTIFIER: NON_NUMERIC_IDENTIFIER_CHAR IDENTIFIER_CHAR*
NON_NUMERIC_IDENTIFIER_CHAR: /[a-zA-Z_]/
IDENTIFIER_CHAR: NON_NUMERIC_IDENTIFIER_CHAR | DIGIT

// Imports
%import common.SIGNED_NUMBER
%import common.NUMBER
%import common.INT  ->  INTEGER
%import common.SIGNED_INT  ->  SIGNED_INTEGER
%import common.WS_INLINE
%import common.NEWLINE
%import common.DIGIT

// Ignore whitespace
%ignore WS_INLINE