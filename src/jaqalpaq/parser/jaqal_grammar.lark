start: header_statements body_statements

// Header Rules
header_statements: [_seq_sep* header_statement (_seq_sep+ header_statement)* _seq_sep*]
?header_statement: register_statement | map_statement | let_statement | import_statement | usepulses_statement
register_statement: _REG array_declaration
map_statement: _MAP map_target map_source
?map_target: IDENTIFIER
?map_source: IDENTIFIER | array_slice | array_element
let_statement: _LET IDENTIFIER SIGNED_NUMBER
import_statement: from_clause? _IMPORT _module_list
usepulses_statement: from_clause? _USEPULSES _module_list
from_clause: _FROM QUALIFIED_IDENTIFIER
_module_list: _parenthesized_module_list | _unparenthesized_module_list | all_module
all_module: "*"
// The addition of a possible newline at one spot in the parenthesized module list is a bit of a hack but hopefully
// is good enough that people won't notice.
_parenthesized_module_list: "(" as_clause ("," _NEWLINE* as_clause)* ")"
_unparenthesized_module_list: as_clause ("," as_clause)*
as_clause: IDENTIFIER [_AS IDENTIFIER]

// Body rules
body_statements: [body_statement (_seq_sep+ body_statement)* _seq_sep?]
?body_statement: gate_statement | macro_definition | loop_statement | gate_block
gate_statement: _gate_name _gate_arg_list
_gate_name: QUALIFIED_IDENTIFIER
_gate_arg_list: _gate_arg*
_gate_arg: array_element_qual | let_or_map_identifier | SIGNED_NUMBER
macro_definition: macro_header macro_gate_block
macro_header: _MACRO _gate_def_list
macro_gate_block: gate_block  // Separating this rule makes tracking contexts easier
_gate_def_list: IDENTIFIER*
loop_statement: _LOOP let_or_integer gate_block

// Gate blocks
?gate_block: sequential_gate_block | parallel_gate_block
sequential_gate_block: "{" _sequential_statements _NEWLINE* "}"
_sequential_statements: _seq_sep* [_sequential_statement (_seq_sep+ _sequential_statement)* _seq_sep*]
_sequential_statement: gate_statement | loop_statement | parallel_gate_block
parallel_gate_block: "<" _parallel_statements ">"
_parallel_statements: _par_sep* [_parallel_statement (_par_sep+ _parallel_statement)* _par_sep*]
_parallel_statement: gate_statement | sequential_gate_block

// Common rules
array_declaration: IDENTIFIER "[" let_or_integer "]"
array_element: IDENTIFIER "[" let_or_signed_integer "]"
array_element_qual: QUALIFIED_IDENTIFIER "[" let_or_signed_integer "]"
array_slice: IDENTIFIER "[" array_slice_start array_slice_stop array_slice_step "]"
array_slice_start: let_or_signed_integer? ":"
array_slice_stop: let_or_signed_integer?
array_slice_step: (":" let_or_signed_integer?)?
?let_or_integer: let_identifier | INTEGER
?let_or_signed_integer: let_identifier | SIGNED_INTEGER
let_identifier: QUALIFIED_IDENTIFIER  // As its own rule this is easier to filter on the backend
let_or_map_identifier: QUALIFIED_IDENTIFIER
_seq_sep: ";" | _NEWLINE+
_par_sep: "|" | _NEWLINE+
_NEWLINE: NEWLINE

// Comment rules
LINE_COMMENT: "//" /[^\n]*/
BLOCK_COMMENT: "/*" /([\n]|.)*/ "*/"
%ignore LINE_COMMENT
%ignore BLOCK_COMMENT

// Identifier rules
IDENTIFIER: NON_NUMERIC_IDENTIFIER_CHAR IDENTIFIER_CHAR*
// The qualified identifier is immediately replaced by a non-terminal rule by the Jaqal parser.
QUALIFIED_IDENTIFIER: NON_NUMERIC_IDENTIFIER_CHAR QUALIFIED_IDENTIFIER_CHAR*
NON_NUMERIC_IDENTIFIER_CHAR: /[a-zA-Z_]/
IDENTIFIER_CHAR: NON_NUMERIC_IDENTIFIER_CHAR | DIGIT
QUALIFIED_IDENTIFIER_CHAR: IDENTIFIER_CHAR | "."

// Keywords
// We do this to allow us to forbid gates with these names
_REG.2: "register"
_MAP.2: "map"
_LET.2: "let"
_MACRO.2: "macro"
_LOOP.2: "loop"
_IMPORT.2: "import"
_USEPULSES.2: "usepulses"
_FROM.2: "from"
_AS.2: "as"

// Imports
%import common.SIGNED_NUMBER
%import common.NUMBER
%import common.INT  ->  INTEGER
%import common.SIGNED_INT  ->  SIGNED_INTEGER
%import common.WS_INLINE
%import common.NEWLINE
%import common.DIGIT

// Ignore whitespace
%ignore WS_INLINE